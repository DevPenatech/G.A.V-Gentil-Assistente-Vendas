# file: session_manager.py
import json
import logging
import os
import re
from typing import List, Dict, Optional
from datetime import datetime

import redis


_redis_password = os.getenv("REDIS_PASSWORD", "").strip()
_redis_config = {
    "host": os.getenv("REDIS_HOST", "redis"),  # Use "redis" como padr√£o (nome do servi√ßo)
    "port": int(os.getenv("REDIS_PORT", 6379)),
    "db": 0,
    "decode_responses": True,
}


# S√≥ adiciona senha se ela existir e n√£o for vazia
if _redis_password and _redis_password not in ["", "<password>"]:
    _redis_config["password"] = _redis_password

try:
    redis_client = redis.Redis(**_redis_config)
    redis_client.ping()  # Testa a conex√£o imediatamente
    logging.info("[SESSION] Redis conectado com sucesso")
except Exception as e:
    logging.warning(f"[SESSION] Redis n√£o dispon√≠vel, usando fallback para arquivo: {e}")
    redis_client = None


def get_redis_client() -> Optional[redis.Redis]:
    """Retorna o cliente Redis global se a conex√£o estiver ativa."""
    global redis_client
    try:
        redis_client.ping()
        return redis_client
    except Exception as e:
        logging.error(f"[SESSION] Falha ao conectar-se ao Redis: {e}")
        return None


def save_session(session_id: str, data: Dict):
    """Salva os dados da sess√£o no Redis com TTL de 1 hora e fallback para arquivo."""
    if not session_id or not data:
        logging.warning("[SESSION] Tentativa de salvar sess√£o com dados inv√°lidos")
        return
        
    try:
        client = get_redis_client()
        if client:
            client.set(session_id, json.dumps(data), ex=3600)
            logging.debug(f"[SESSION] Sess√£o salva no Redis: {session_id}")
        else:
            # Fallback para arquivo se Redis n√£o estiver dispon√≠vel
            _save_session_to_file(session_id, data)
            
    except Exception as e:
        logging.error(f"[SESSION] Erro ao salvar sess√£o no Redis: {e}")
        # Fallback para arquivo
        _save_session_to_file(session_id, data)


def load_session(session_id: str) -> Dict:
    """Carrega os dados da sess√£o do Redis com fallback para arquivo."""
    if not session_id:
        logging.warning("[SESSION] Tentativa de carregar sess√£o sem ID")
        return {}
        
    try:
        client = get_redis_client()
        if client:
            raw = client.get(session_id)
            if raw:
                data = json.loads(raw)
                logging.debug(f"[SESSION] Sess√£o carregada do Redis: {session_id}")
                return data
        
        # Fallback para arquivo se n√£o encontrar no Redis
        return _load_session_from_file(session_id)
        
    except Exception as e:
        logging.error(f"[SESSION] Erro ao carregar sess√£o do Redis: {e}")
        # Fallback para arquivo
        return _load_session_from_file(session_id)


def clear_session(session_id: str):
    """Remove os dados da sess√£o do Redis e arquivo."""
    if not session_id:
        return
        
    try:
        client = get_redis_client()
        if client:
            client.delete(session_id)
            logging.debug(f"[SESSION] Sess√£o removida do Redis: {session_id}")
        
        # Remove tamb√©m do arquivo
        _clear_session_file(session_id)
        
    except Exception as e:
        logging.error(f"[SESSION] Erro ao limpar sess√£o: {e}")
        # Tenta remover do arquivo mesmo se Redis falhar
        _clear_session_file(session_id)

# Fun√ß√µes de fallback para arquivo
def _get_session_file_path(session_id: str) -> str:
    """Retorna caminho do arquivo de sess√£o."""
    # Sanitiza o session_id para nome de arquivo seguro
    safe_id = re.sub(r'[^\w\-_.]', '_', session_id)
    return f"data/session_{safe_id}.json"

def _save_session_to_file(session_id: str, data: Dict):
    """Salva sess√£o em arquivo como fallback."""
    try:
        os.makedirs("data", exist_ok=True)
        file_path = _get_session_file_path(session_id)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        logging.info(f"[SESSION] Sess√£o salva em arquivo (fallback): {file_path}")
        
    except Exception as e:
        logging.error(f"[SESSION] Erro ao salvar sess√£o em arquivo: {e}")

def _load_session_from_file(session_id: str) -> Dict:
    """Carrega sess√£o de arquivo como fallback."""
    try:
        file_path = _get_session_file_path(session_id)
        
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            logging.info(f"[SESSION] Sess√£o carregada de arquivo (fallback): {file_path}")
            return data
            
    except Exception as e:
        logging.error(f"[SESSION] Erro ao carregar sess√£o de arquivo: {e}")
    
    return {}

def _clear_session_file(session_id: str):
    """Remove arquivo de sess√£o."""
    try:
        file_path = _get_session_file_path(session_id)
        if os.path.exists(file_path):
            os.remove(file_path)
            logging.debug(f"[SESSION] Arquivo de sess√£o removido: {file_path}")
    except Exception as e:
        logging.error(f"[SESSION] Erro ao remover arquivo de sess√£o: {e}")
    
def format_product_list_for_display(products: List[Dict], title: str, has_more: bool, offset: int = 0) -> str:
    if not products:
        return f"ü§ñ {title}\nNenhum produto encontrado com esse crit√©rio."
    
    response = f"ü§ñ {title}\n"
    for i, p in enumerate(products, 1 + offset):
        price = p.get('pvenda') or 0.0
        price_str = f"R$ {price:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
        
        # üÜï CORRE√á√ÉO: Compatibilidade com produtos do banco (descricao) e da KB (canonical_name)
        product_name = p.get('descricao') or p.get('canonical_name', 'Produto sem nome')
        
        response += f"{i}. {product_name} - {price_str}\n"
    
    response += "Me diga o nome ou o n√∫mero do item que deseja adicionar.\n"
    if has_more:
        response += "Ou digite 'mais' para ver outros resultados!"
    return response

def format_cart_for_display(cart: List[Dict]) -> str:
    if not cart:
        return "ü§ñ Seu carrinho de compras est√° vazio."
    
    response = "üõí Seu Carrinho de Compras:\n"
    total = 0.0
    for item in cart:
        price = item.get('pvenda') or 0.0
        qt = item.get('qt', 0)
        subtotal = price * qt
        total += subtotal
        price_str = f"R$ {price:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
        subtotal_str = f"R$ {subtotal:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
        
        # üÜï CORRE√á√ÉO: Compatibilidade com produtos do banco (descricao) e da KB (canonical_name)
        product_name = item.get('descricao') or item.get('canonical_name', 'Produto sem nome')
        
        response += f"- {product_name} (Qtd: {qt}) - Unit: {price_str} - Subtotal: {subtotal_str}\n"
    
    total_str = f"R$ {total:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
    response += f"-----------------------------------\nTOTAL DO PEDIDO: {total_str}"
    return response


def add_item_to_cart(cart: List[Dict], item: Dict, qt: float) -> None:
    """Adiciona um item ao carrinho ou incrementa a quantidade se ele j√° existir."""
    if qt <= 0:
        return

    for existing in cart:
        if (
            (item.get("codprod") and existing.get("codprod") == item.get("codprod"))
            or (item.get("canonical_name") and existing.get("canonical_name") == item.get("canonical_name"))
        ):
            existing["qt"] = existing.get("qt", 0) + qt
            return

    cart.append({**item, "qt": qt})


def remove_item_from_cart(cart: List[Dict], index: int) -> bool:
    """Remove um item do carrinho pelo √≠ndice (baseado em 0)."""
    if 0 <= index < len(cart):
        cart.pop(index)
        return True
    return False


def update_item_quantity(cart: List[Dict], index: int, qt: float) -> bool:
    """Atualiza a quantidade de um item espec√≠fico do carrinho."""
    if 0 <= index < len(cart) and qt > 0:
        cart[index]["qt"] = qt
        return True
    return False


def add_quantity_to_item(cart: List[Dict], index: int, qt: float) -> bool:
    """Adiciona quantidade extra a um item existente no carrinho."""
    if 0 <= index < len(cart) and qt > 0:
        cart[index]["qt"] = cart[index].get("qt", 0) + qt
        return True
    return False

def add_message_to_history(session_data: Dict, role: str, message: str, action_type: str = None):
    """
    Adiciona uma mensagem ao hist√≥rico da conversa.
    
    Args:
        session_data: Dados da sess√£o
        role: 'user' ou 'assistant'
        message: Conte√∫do da mensagem
        action_type: Tipo de a√ß√£o realizada (opcional)
    """
    if 'conversation_history' not in session_data:
        session_data['conversation_history'] = []
    
    # Limita o hist√≥rico a 20 mensagens (10 pares) para n√£o sobrecarregar a IA
    if len(session_data['conversation_history']) >= 20:
        session_data['conversation_history'] = session_data['conversation_history'][-18:]
    
    message_entry = {
        'role': role,
        'message': message,
        'timestamp': datetime.now().isoformat(),
    }
    
    if action_type:
        message_entry['action_type'] = action_type
        
    session_data['conversation_history'].append(message_entry)

def get_conversation_context(session_data: Dict, max_messages: int = 10) -> str:
    """
    Formata o hist√≥rico da conversa para enviar √† IA.
    
    Args:
        session_data: Dados da sess√£o
        max_messages: M√°ximo de mensagens a incluir
        
    Returns:
        String formatada com o contexto da conversa
    """
    history = session_data.get('conversation_history', [])
    
    if not history:
        return "Esta √© a primeira intera√ß√£o com o cliente."
    
    # Pega as √∫ltimas N mensagens
    recent_history = history[-max_messages:] if len(history) > max_messages else history
    
    context_lines = ["**HIST√ìRICO DA CONVERSA (mensagens recentes):**"]
    
    for entry in recent_history:
        role_icon = "üë§" if entry['role'] == 'user' else "ü§ñ"
        message = entry['message']
        
        # Trunca mensagens muito longas
        if len(message) > 200:
            message = message[:200] + "..."
            
        context_lines.append(f"{role_icon} {entry['role'].upper()}: {message}")
        
        # Adiciona informa√ß√£o sobre a√ß√£o realizada, se houver
        if entry.get('action_type'):
            context_lines.append(f"   ‚Ü≥ A√ß√£o: {entry['action_type']}")
    
    context_lines.append("**FIM DO HIST√ìRICO**")
    context_lines.append("")
    
    return "\n".join(context_lines)

def get_session_context_summary(session_data: Dict) -> str:
    """
    Cria um resumo do estado atual da sess√£o para a IA.
    """
    lines = []
    
    # Informa√ß√µes do carrinho
    cart = session_data.get('shopping_cart', [])
    if cart:
        lines.append(f"üõí CARRINHO: {len(cart)} itens")
        for i, item in enumerate(cart[:3], 1):  # Mostra apenas os 3 primeiros
            product_name = item.get('descricao', item.get('canonical_name', 'Produto'))
            qt = item.get('qt', 0)
            lines.append(f"   {i}. {product_name} (Qtd: {qt})")
        if len(cart) > 3:
            lines.append(f"   ... e mais {len(cart) - 3} itens")
    else:
        lines.append("üõí CARRINHO: vazio")
    
    # √öltima busca realizada
    last_search = session_data.get('last_search_params', {})
    if last_search:
        search_term = last_search.get('product_name', '')
        if search_term:
            lines.append(f"üîç √öLTIMA BUSCA: '{search_term}'")
    
    # Cliente identificado
    customer = session_data.get('customer_context')
    if customer:
        lines.append(f"üë§ CLIENTE: {customer.get('nome', 'Identificado')}")
    else:
        lines.append("üë§ CLIENTE: n√£o identificado")
    
    # A√ß√£o pendente
    pending = session_data.get('pending_action')
    if pending:
        lines.append(f"‚è≥ AGUARDANDO: {pending}")
    
    return "\n".join(lines)